document.addEventListener('DOMContentLoaded', () => {
    const previewArea = document.getElementById('preview-area');
    const outputHtmlArea = document.getElementById('output-html-area');
    const copyButton = document.getElementById('copy-button');
    const copyMessage = document.getElementById('copy-message');

    // ★修正点1: Quillのカスタムツールバーを設定
    const toolbarOptions = [
        // 標準機能: 太字(strong/b)はQuillが自動で処理
        ['bold', 'italic', 'underline'], 
        // リンクの標準機能
        ['link'],
        // カスタムボタンのグループ
        [{ 'header': 1 }, { 'header': 2 }], // H1/H2タグの代用
        ['customHeading', 'customLink', 'customHr'] // 貴社専用マークアップボタン
    ];

    // ★修正点2: Quillエディタの初期化
    const quill = new Quill('#editor-container', {
        theme: 'snow',
        modules: {
            toolbar: {
                container: toolbarOptions,
                handlers: {
                    // カスタムボタンのイベントハンドラ
                    'customHeading': function() { insertCustomMarkup('見出し: '); },
                    'customHr': function() { insertCustomMarkup('\n---\n'); },
                    'customLink': function() { insertCustomMarkup('(表示テキスト 「URL」 別窓)'); },
                    'link': function(value) { // 標準リンク機能を拡張 (カスタムボタン不要ならこれを使う)
                        if (value) {
                            const range = quill.getSelection();
                            const currentText = quill.getText(range.index, range.length).trim();
                            // 選択範囲にテキストがあればそれを表示テキストに
                            const text = currentText || 'リンクテキスト';
                            insertCustomMarkup(`(${text} 「URL」 別窓)`);
                        }
                    }
                }
            }
        }
    });

    // カスタムマークアップを挿入するヘルパー関数
    function insertCustomMarkup(markup) {
        const range = quill.getSelection(true);
        if (range) {
            quill.insertText(range.index, markup, Quill.sources.USER);
            quill.setSelection(range.index + markup.length, range.index + markup.length, Quill.sources.SILENT);
        }
    }

    // ★修正点3: テキスト変更イベントを監視 (Quill専用)
    quill.on('text-change', () => {
        // Quillが内部で保持するプレーンテキスト（改行やスペースを保持）を取得
        const inputText = quill.getText();
        updateConversion(inputText);
    });
    
    // Quillの標準機能では、太字・リンクなどはHTMLタグ（<b>, <a>）としてDOMに残るため、
    // ここで変換ロジックを工夫し、HTMLから貴社記法を抽出するか、記法を直接挿入するようにします。

    // ---- 変換ロジックは以前の記法ベースのものを流用・維持します ----
    
    // (中略: updateConversion() 関数と convertTextToHtml() 関数は前回のものをほぼそのまま使用)

    function updateConversion(inputText) {
        // QuillのgetText()で取得したプレーンテキストを変換ロジックに渡す
        const finalHtml = convertTextToHtml(inputText);
        
        previewArea.innerHTML = finalHtml;
        outputHtmlArea.value = finalHtml;
    }
    
    // ★重要: convertTextToHtml 関数は、Quillが出力するHTMLではなく、
    // 挿入された「見出し:」や「---」といった**貴社専用のマークアップ記法**を解析する必要があります。
    // そのため、前回のscript.jsのロジックをそのまま使用します。

    function convertTextToHtml(inputText) {
        // ... (前回のスクリプトの convertTextToHtml() の全文をここに貼り付け) ...
        const lines = inputText.split('\n');
        let finalHtmlLines = [];
        let currentParagraphLines = [];

        // 段落処理関数（太字・スペース・リンクの置換を含む）
        const processParagraph = () => {
            if (currentParagraphLines.length > 0) {
                // 処理済みの行を結合
                let processedParagraph = currentParagraphLines.map(line => {
                    let processedLine = line;

                    // 1. 太字の正規表現処理 (**)
                    // **太字** を <strong>太字</strong> に変換
                    processedLine = processedLine.replace(/\*\*(.*?)\*\*/g, '<strong>$1</strong>');
                    
                    // 2. 固定スペースの正規表現処理 (___)
                    // ___ を &nbsp; (3つ) に変換
                    processedLine = processedLine.replace(/___/g, '&nbsp;&nbsp;&nbsp;');
                    
                    // 3. リンクの正規表現処理
                    // (表示テキスト 「URL」) または (表示テキスト 「URL」 別窓)
                    const linkPattern = /\((.+?)\s*「(https?:\/\/[^\s」]+?)」(別窓)?\)/g;
                    processedLine = processedLine.replace(linkPattern, (match, displayText, url, isNewWindow) => {
                        const targetAttr = isNewWindow ? ' target="_blank"' : '';
                        return `<a href="${url}"${targetAttr}>${displayText.trim()}</a>`;
                    });

                    return processedLine;
                }).join('<br>\n'); // 段落内の改行は <br> に変換

                finalHtmlLines.push(`<p>${processedParagraph}</p>\n`);
                currentParagraphLines = [];
            }
        };

        for (const line of lines) {
            const trimmedLine = line.trim();

            if (trimmedLine.startsWith('見出し:')) {
                processParagraph();
                const headingText = trimmedLine.replace('見出し:', '').trim();
                finalHtmlLines.push(`<h2>${headingText}</h2>`);
                finalHtmlLines.push('<hr>\n');
            } else if (trimmedLine.startsWith('小見出し:')) {
                processParagraph();
                const subheadingText = trimmedLine.replace('小見出し:', '').trim();
                finalHtmlLines.push(`<h3>${subheadingText}</h3>\n`);
            } else if (trimmedLine === '---') {
                processParagraph();
                finalHtmlLines.push('<hr>\n');
            } else if (trimmedLine === '') {
                processParagraph();
            } else {
                // 通常のテキスト行として段落配列に追加
                currentParagraphLines.push(trimmedLine);
            }
        }

        processParagraph();
        
        return `<div class="article-body-v2">\n${finalHtmlLines.join('')}</div>`;
    }
    
    // (コピーボタンの処理は省略せず、前回のものをそのまま使用)
    
    // ページロード時に初期化
    quill.setText("編集したいテキストを入力するか、左上のツールバーボタンで装飾してください。\n\n**太字** や (リンクテキスト 「URL」 別窓) は直接入力も可能です。\n\n---");
    updateConversion(quill.getText());

    copyButton.addEventListener('click', () => {
        // ... (前回のスクリプトのコピー処理の全文をここに貼り付け) ...
        const htmlContent = outputHtmlArea.value;
        navigator.clipboard.writeText(htmlContent).then(() => {
            copyMessage.textContent = 'コピーしました！';
            copyMessage.style.visibility = 'visible';
            setTimeout(() => { copyMessage.style.visibility = 'hidden'; }, 3000);
        }).catch(err => {
            copyMessage.textContent = 'コピー失敗。手動でコピーしてください。';
            copyMessage.style.visibility = 'visible';
            copyMessage.style.color = 'red';
            setTimeout(() => { copyMessage.style.visibility = 'hidden'; }, 5000);
        });
    });

});