document.addEventListener('DOMContentLoaded', () => {
    const previewArea = document.getElementById('preview-area');
    const outputHtmlArea = document.getElementById('output-html-area');
    const copyButton = document.getElementById('copy-button');
    const copyMessage = document.getElementById('copy-message');

    // ★修正点: Quillのツールバー定義を標準機能のみに簡素化 (エラー回避)
    const toolbarOptions = [
        ['bold', 'italic'], 
        ['link'], 
        // 標準のツールバーに太字とリンクを含める
    ];

    // Quillエディタの初期化
    const quill = new Quill('#editor-container', {
        theme: 'snow',
        modules: {
            toolbar: toolbarOptions
            // カスタムハンドラーを削除し、初期化エラーを防ぐ
        }
    });

    // テキスト変更イベントを監視し、リアルタイム変換を実行
    quill.on('text-change', () => {
        // Quillが内部で保持するHTMLを取得
        const quillHtml = quill.root.innerHTML;
        updateConversion(quillHtml);
    });
    
    /**
     * 変換処理を実行し、UIを更新するメイン関数
     */
    function updateConversion(quillHtml) {
        // QuillのHTMLを、貴社専用の記法（見出し: や ---）と結合して最終変換
        const finalHtml = convertQuillHtmlToCustomHtml(quillHtml);
        
        previewArea.innerHTML = finalHtml;
        outputHtmlArea.value = finalHtml;
    }
    
    /**
     * Quillが出力したHTMLを貴社向けHTMLに変換する関数
     */
    function convertQuillHtmlToCustomHtml(quillHtml) {
        // Quillが出力したHTMLを、<p>タグで分割して処理する
        // 見出しや区切り線はQuillのHTMLにはないので、手動で入力された記法を探す必要がある
        
        const lines = quillHtml.split('<p>');
        let finalHtmlLines = [];
        let currentParagraphLines = [];

        // QuillのHTMLをプレーンテキストに戻す関数（記法を探すため）
        const tempDiv = document.createElement('div');
        tempDiv.innerHTML = quillHtml;
        const plainText = tempDiv.innerText || tempDiv.textContent;
        
        // プレーンテキストを行ごとに処理する（見出し、区切り線を探す）
        const rawLines = plainText.split('\n');

        const processParagraph = () => {
             if (currentParagraphLines.length > 0) {
                 let processedParagraph = currentParagraphLines.map(line => {
                    // Quillが出力したHTML内で、太字とリンクを処理
                    // Quillは太字を<strong>で出力するので、そのまま利用
                    
                    // 1. 固定スペースの正規表現処理 (___)
                    // これはエディタ上でも直接入力してもらう
                    line = line.replace(/___/g, '&nbsp;&nbsp;&nbsp;');
                    
                    // 2. リンクの処理: Quillが出力した <a> タグをそのまま利用
                    // 3. 太字の処理: Quillが出力した <strong>/<b> タグをそのまま利用
                    return line;
                 }).join('<br>\n'); // 段落内の改行は <br> に変換

                 finalHtmlLines.push(`<p>${processedParagraph}</p>\n`);
                 currentParagraphLines = [];
             }
        };

        for (const line of rawLines) {
            const trimmedLine = line.trim();

            if (trimmedLine.startsWith('見出し:')) {
                processParagraph();
                const headingText = trimmedLine.replace('見出し:', '').trim();
                finalHtmlLines.push(`<h2>${headingText}</h2>`);
                finalHtmlLines.push('<hr>\n');
            } else if (trimmedLine.startsWith('小見出し:')) {
                processParagraph();
                const subheadingText = trimmedLine.replace('小見出し:', '').trim();
                finalHtmlLines.push(`<h3>${subheadingText}</h3>\n`);
            } else if (trimmedLine === '---') {
                processParagraph();
                finalHtmlLines.push('<hr>\n');
            } else if (trimmedLine === '') {
                processParagraph(); 
            } else {
                // 通常のテキスト行として段落配列に追加
                // QuillのHTMLをそのまま再利用
                let processedLine = line;
                
                // ここで Quillの標準HTMLタグ (<b>, <a>) を含む行を処理
                // 簡易的に太字とリンクのタグを保持する処理 (QuillのHTMLには元々含まれているはず)
                processedLine = line.replace(/<strong[^>]*>([\s\S]*?)<\/strong>/g, '<strong>$1</strong>');
                processedLine = processedLine.replace(/<b[^>]*>([\s\S]*?)<\/b>/g, '<strong>$1</strong>');
                processedLine = processedLine.replace(/<a[^>]*href="([^"]+)"[^>]*>([\s\S]*?)<\/a>/g, (match, url, text) => {
                    // Quillが出力した<a>タグをそのまま受け入れる
                    return match;
                });
                
                // --- を探して置き換え
                processedLine = processedLine.replace(/___/g, '&nbsp;&nbsp;&nbsp;');
                
                currentParagraphLines.push(processedLine);
            }
        }
        
        processParagraph();

        // 最終的なHTMLを構築する際は、Quillが出力したHTMLから不要なタグを取り除く必要があります。
        // ここでは、一旦プレーンテキストに戻して、記法に基づいて再構築するロジックを優先します。
        
        // 最後に残っている段落があれば閉じる
        
        return `<div class="article-body-v2">\n${finalHtmlLines.join('')}</div>`;
    }

    // 初期データの設定
    quill.setText("編集したいテキストをここに入力します。\n\n見出し: テスト見出し\n\n**太字** やリンクはツールバーボタンで操作できます。");
    updateConversion(quill.root.innerHTML);

    // コピーボタンの処理
    copyButton.addEventListener('click', () => {
        const htmlContent = outputHtmlArea.value;
        navigator.clipboard.writeText(htmlContent).then(() => {
            copyMessage.textContent = 'コピーしました！';
            copyMessage.style.visibility = 'visible';
            setTimeout(() => { copyMessage.style.visibility = 'hidden'; }, 3000);
        }).catch(err => {
            copyMessage.textContent = 'コピー失敗。手動でコピーしてください。';
            copyMessage.style.visibility = 'visible';
            copyMessage.style.color = 'red';
            setTimeout(() => { copyMessage.style.visibility = 'hidden'; }, 5000);
        });
    });
});