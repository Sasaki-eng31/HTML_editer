document.addEventListener('DOMContentLoaded', () => {
    const previewArea = document.getElementById('preview-area');
    const outputHtmlArea = document.getElementById('output-html-area');
    const copyButton = document.getElementById('copy-button');
    const copyMessage = document.getElementById('copy-message');

    // ★修正点1: Quillのカスタムツールバーを設定
    const toolbarOptions = [
        ['bold', 'italic'], // 太字、斜体（標準機能）
        ['link'], // リンク（標準機能）
        // カスタムボタン: CSSのクラス名と合わせる
        ['custom-heading', 'custom-subheading', 'custom-link', 'custom-hr'] 
    ];

    // ★修正点2: Quillエディタの初期化
    const quill = new Quill('#editor-container', {
        theme: 'snow',
        modules: {
            toolbar: {
                container: toolbarOptions,
                handlers: {
                    // ★重要★: カスタムボタンの動作を定義
                    'custom-heading': () => insertCustomMarkup('見出し: ', 'heading'),
                    'custom-subheading': () => insertCustomMarkup('小見出し: ', 'heading'),
                    'custom-link': () => insertCustomMarkup(' (表示テキスト 「URL」 別窓)', 'link'),
                    'custom-hr': () => insertCustomMarkup('\n---\n', 'hr'),
                    // 標準のリンクボタンは、Quillが標準のHTMLタグを挿入するので無効化しても良い
                    // 'link': function(value) { if (value) { this.quill.theme.tooltip.edit('link', 'https://'); } }
                }
            }
        }
    });

    /**
     * カスタムマークアップを挿入または選択範囲を置換するヘルパー関数
     * @param {string} markup - 挿入するマークアップ記法
     * @param {string} type - 記法のタイプ ('heading', 'link', 'hr')
     */
    function insertCustomMarkup(markup, type) {
        const range = quill.getSelection(true);
        if (!range) return;

        let selectedText = quill.getText(range.index, range.length).trim();
        let finalMarkup = '';

        if (type === 'heading') {
            // 見出しの場合、選択テキストがある場合はそれを使い、行頭に挿入
            const textToInsert = selectedText || 'ここにタイトルを記述';
            finalMarkup = markup + textToInsert;
            
            // 選択範囲を削除し、新しいマークアップを挿入
            quill.deleteText(range.index, range.length, Quill.sources.USER);
            quill.insertText(range.index, finalMarkup, Quill.sources.USER);

        } else if (type === 'link') {
            // リンクの場合、選択テキストがある場合はそれを「表示テキスト」に使う
            const defaultText = selectedText || 'リンクテキスト';
            finalMarkup = ` (${defaultText} 「https://」 別窓)`;
            
            // 選択範囲を削除し、新しいマークアップを挿入
            quill.deleteText(range.index, range.length, Quill.sources.USER);
            quill.insertText(range.index, finalMarkup, Quill.sources.USER);

        } else if (type === 'hr') {
            // 区切り線の場合、単独行を挿入
            finalMarkup = markup;
            quill.insertText(range.index, finalMarkup, Quill.sources.USER);
        }
        
        // カーソルを移動させる (任意)
        quill.setSelection(range.index + finalMarkup.length, range.index + finalMarkup.length, Quill.sources.SILENT);
    }

    // ★修正点3: テキスト変更イベントを監視 (Quill専用)
    quill.on('text-change', () => {
        // Quillが内部で保持するプレーンテキスト（改行やスペースを保持）を取得
        const inputText = quill.getText();
        updateConversion(inputText);
    });
    
    /**
     * 変換処理を実行し、UIを更新するメイン関数
     */
    function updateConversion(inputText) {
        const finalHtml = convertTextToHtml(inputText);
        
        // プレビューエリアにHTMLとして挿入（リアルタイムプレビュー）
        previewArea.innerHTML = finalHtml;
        
        // 出力エリアにHTMLコードとして挿入
        outputHtmlArea.value = finalHtml;
    }
    
    /**
     * 入力テキストをecbeing向けHTMLに変換します。（既存ロジック）
     */
    function convertTextToHtml(inputText) {
        const lines = inputText.split('\n');
        let finalHtmlLines = [];
        let currentParagraphLines = [];

        // 段落処理関数（太字・スペース・リンクの置換を含む）
        const processParagraph = () => {
            if (currentParagraphLines.length > 0) {
                let processedParagraph = currentParagraphLines.map(line => {
                    let processedLine = line.trim(); // 行頭・行末の空白をトリム

                    // 1. 太字の正規表現処理 (**)
                    processedLine = processedLine.replace(/\*\*(.*?)\*\*/g, '<strong>$1</strong>');
                    
                    // 2. 固定スペースの正規表現処理 (___)
                    processedLine = processedLine.replace(/___/g, '&nbsp;&nbsp;&nbsp;');
                    
                    // 3. リンクの正規表現処理 (スペースに注意)
                    const linkPattern = /\((.+?)\s*「(https?:\/\/[^\s」]+?)」(別窓)?\)/g;
                    processedLine = processedLine.replace(linkPattern, (match, displayText, url, isNewWindow) => {
                        const targetAttr = isNewWindow ? ' target="_blank"' : '';
                        return `<a href="${url.trim()}"${targetAttr}>${displayText.trim()}</a>`;
                    });

                    return processedLine;
                }).join('<br>\n'); // 段落内の改行は <br> に変換

                finalHtmlLines.push(`<p>${processedParagraph}</p>\n`);
                currentParagraphLines = [];
            }
        };

        for (const line of lines) {
            const trimmedLine = line.trim();

            if (trimmedLine.startsWith('見出し:')) {
                processParagraph();
                const headingText = trimmedLine.replace('見出し:', '').trim();
                finalHtmlLines.push(`<h2>${headingText}</h2>`);
                finalHtmlLines.push('<hr>\n');
            } else if (trimmedLine.startsWith('小見出し:')) {
                processParagraph();
                const subheadingText = trimmedLine.replace('小見出し:', '').trim();
                finalHtmlLines.push(`<h3>${subheadingText}</h3>\n`);
            } else if (trimmedLine === '---') {
                processParagraph();
                finalHtmlLines.push('<hr>\n');
            } else if (trimmedLine === '') {
                processParagraph(); // 空行の場合、現在の段落を閉じる
            } else {
                // 通常のテキスト行として段落配列に追加
                currentParagraphLines.push(line); // トリムされていない行を保持 (段落内でのスペース維持のため)
            }
        }

        // 最後に残っている段落があれば閉じる
        processParagraph();
        
        // 全体を囲むdiv
        return `<div class="article-body-v2">\n${finalHtmlLines.join('')}</div>`;
    }

    // 初期データの設定
    quill.setText("編集したいテキストをここに入力します。\n\nテキストを選択してから、上のツールバーボタンを押してください。\n\n**太字** や (リンク 「URL」 別窓) は、ボタンか直接入力で作成できます。\n\n---");
    updateConversion(quill.getText());

    // コピーボタンの処理
    copyButton.addEventListener('click', () => {
        const htmlContent = outputHtmlArea.value;
        navigator.clipboard.writeText(htmlContent).then(() => {
            copyMessage.textContent = 'コピーしました！';
            copyMessage.style.visibility = 'visible';
            setTimeout(() => { copyMessage.style.visibility = 'hidden'; }, 3000);
        }).catch(err => {
            copyMessage.textContent = 'コピー失敗。手動でコピーしてください。';
            copyMessage.style.visibility = 'visible';
            copyMessage.style.color = 'red';
            setTimeout(() => { copyMessage.style.visibility = 'hidden'; }, 5000);
        });
    });
});