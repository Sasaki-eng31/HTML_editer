document.addEventListener('DOMContentLoaded', () => {
    const inputTextArea = document.getElementById('input-text-area');
    const previewArea = document.getElementById('preview-area');
    const outputHtmlArea = document.getElementById('output-html-area');
    const generateButton = document.getElementById('generate-button');
    const copyButton = document.getElementById('copy-button');
    const copyMessage = document.getElementById('copy-message');

    /**
     * テキストの変更を監視し、リアルタイムでプレビューと出力エリアを更新します。
     */
    inputTextArea.addEventListener('input', updateConversion);

    /**
     * 「HTMLコードを出力」ボタンクリック時、最終出力を更新します。
     * （inputイベントで自動更新されますが、ボタンは明確な操作として残します）
     */
    generateButton.addEventListener('click', updateConversion);

    /**
     * 「HTMLコードをコピー」ボタンクリック時、コードをクリップボードにコピーします。
     */
    copyButton.addEventListener('click', () => {
        const htmlContent = outputHtmlArea.value;
        navigator.clipboard.writeText(htmlContent).then(() => {
            copyMessage.textContent = 'コピーしました！';
            copyMessage.style.visibility = 'visible';
            setTimeout(() => {
                copyMessage.style.visibility = 'hidden';
            }, 3000);
        }).catch(err => {
            copyMessage.textContent = 'コピー失敗。手動でコピーしてください。';
            copyMessage.style.visibility = 'visible';
            copyMessage.style.color = 'red';
            setTimeout(() => {
                copyMessage.style.visibility = 'hidden';
            }, 5000);
        });
    });

    /**
     * 変換処理を実行し、UIを更新するメイン関数
     */
    function updateConversion() {
        const inputText = inputTextArea.value;
        const finalHtml = convertTextToHtml(inputText);
        
        // プレビューエリアにHTMLとして挿入（リアルタイムプレビュー）
        previewArea.innerHTML = finalHtml;
        
        // 出力エリアにHTMLコードとして挿入
        outputHtmlArea.value = finalHtml;
    }
    
    /**
     * Pythonのロジックを再現し、入力テキストをecbeing向けHTMLに変換します。
     * @param {string} inputText - 入力された生テキスト
     * @returns {string} 最終的なHTML文字列
     */
    function convertTextToHtml(inputText) {
        const lines = inputText.split('\n');
        let finalHtmlLines = [];
        let currentParagraphLines = [];

        // 変換ロジックを定義
        const processParagraph = () => {
            if (currentParagraphLines.length > 0) {
                // 段落内の太字、スペース、リンクを処理
                let processedParagraph = currentParagraphLines.map(line => {
                    let processedLine = line;

                    // 1. 太字の正規表現処理 (**)
                    // **太字** を <strong>太字</strong> に変換
                    processedLine = processedLine.replace(/\*\*(.*?)\*\*/g, '<strong>$1</strong>');
                    
                    // 2. 固定スペースの正規表現処理 (___)
                    // ___ を &nbsp; (3つ) に変換
                    processedLine = processedLine.replace(/___/g, '&nbsp;&nbsp;&nbsp;');
                    
                    // 3. リンクの正規表現処理
                    // (表示テキスト 「URL」) または (表示テキスト 「URL」 別窓)
                    const linkPattern = /\((.+?)\s*「(https?:\/\/[^\s」]+?)」(別窓)?\)/g;
                    processedLine = processedLine.replace(linkPattern, (match, displayText, url, isNewWindow) => {
                        const targetAttr = isNewWindow ? ' target="_blank"' : '';
                        return `<a href="${url}"${targetAttr}>${displayText.trim()}</a>`;
                    });

                    return processedLine;
                }).join('<br>\n'); // 段落内の改行は <br> に変換

                finalHtmlLines.push(`<p>${processedParagraph}</p>\n`);
                currentParagraphLines = [];
            }
        };

        for (const line of lines) {
            const trimmedLine = line.trim();

            if (trimmedLine.startsWith('見出し:')) {
                processParagraph(); // 現在の段落を閉じる
                const headingText = trimmedLine.replace('見出し:', '').trim();
                finalHtmlLines.push(`<h2>${headingText}</h2>`);
                finalHtmlLines.push('<hr>\n');
            } else if (trimmedLine.startsWith('小見出し:')) {
                processParagraph(); // 現在の段落を閉じる
                const subheadingText = trimmedLine.replace('小見出し:', '').trim();
                finalHtmlLines.push(`<h3>${subheadingText}</h3>\n`);
            } else if (trimmedLine === '---') {
                processParagraph(); // 現在の段落を閉じる
                finalHtmlLines.push('<hr>\n');
            } else if (trimmedLine === '') {
                processParagraph(); // 空行の場合、現在の段落を閉じる
            } else {
                // 通常のテキスト行として段落配列に追加
                currentParagraphLines.push(trimmedLine);
            }
        }

        // 最後に残っている段落があれば閉じる
        processParagraph();
        
        // 全体を囲むdivを閉じる
        return `<div class="article-body-v2">\n${finalHtmlLines.join('')}</div>`;
    }

    // ページロード時に一度実行
    updateConversion();
});